<?php$dictionarydir=$relative."dictionaries/".$_SESSION["lang"]."/";if(!$version)  {	$versionfile=$dictionarydir."version.txt";	$version=explode(".",file_get_contents($versionfile));	$version[2]+=1; # Microversion increased by 1	$version=implode(".",$version);	file_put_contents($versionfile,$version);	echo "<p>"._(printf("Version &s",$version))."</p>";}$q='select DISTINCT(ac.id) from affixclass ac left join affixrule ar on ar.affixclassid=ac.id where ac.lang="'.$_SESSION["lang"].'" and affixclass LIKE "COMPOUNDEND" or affix LIKE "-"';$result=$mysqli->query($q);if(!$result) $log.=mysqlerror($q); else $r=$result->fetch_all();$affixclassesacceptedinstrong=call_user_func_array('array_merge',$r);$q='select word, strong_declension, misspellings, (select GROUP_CONCAT(wa.affixclassid SEPARATOR ",") from wordclass_to_affixclass wa where wa.wordclassid=w.wordclass) as affixclasses, (select GROUP_CONCAT(fa.affixclassid SEPARATOR ",") from  fugeelement_to_affixclass fa where fa.fugeelementid=w.fugeelementid) as fugeelementaffixclasses from words w where w.lang="'.$_SESSION["lang"].'" and wordstatus>=2 group by w.id order by word';#echo $q;$result=$mysqli->query($q);$num=$result->num_rows;if(!$result) $log.=mysqlerror($q); else {	while($r=$result->fetch_assoc())	{		$dic.=$r["word"].($r["affixclasses"]?"/".$r["affixclasses"]:"").($r["fugeelementaffixclasses"]?($r["affixclasses"]?",":"/").$r["fugeelementaffixclasses"]:"")			.($r["misspellings"]?" ph:".preg_replace("/, */"," ph:",$r["misspellings"]):''); 		if($r["strong_declension"])		{			$strong=explode(",",str_replace(" ","",$r["strong_declension"]));			$strong=implode(",",array_diff($strong,array($r["word"])));			if($strong) { 				$num+=substr_count($strong,",");				$endslash=array_intersect(explode(",",$r["affixclasses"]),$affixclassesacceptedinstrong);				$dic.="\n".str_replace(",","\n".($endslash?"/".implode(",",$endslash):""),$strong);			}		}		$dic.="\n";	}	}$result=$mysqli->query('select id from affixclass where lang="'.$_SESSION["lang"].'" and affixclass LIKE "FORBIDDENWORD"');if(!$result) $log.=mysqlerror($q); else $r=$result->fetch_assoc();$forbidden=$r["id"];$result=$mysqli->query('select unaccepted_word from unaccepted_word where lang="'.$_SESSION["lang"].'"');if(!$result) $log.=mysqlerror($q); else {	while($r=$result->fetch_assoc())	{		$unaccept=explode(",",str_replace(" ","",$r["unaccepted_word"]));		$num+=count($unaccept);		$dic.=implode("/".$forbidden."\n",$unaccept)."/".$forbidden."\n"; 	}}$dic=preg_replace("/(?sim)^([^\n\r]*?\/[a-zæøå][a-zæøå0-9]*)[\/\n]/","\"\\1\"",str_replace("\r\n","\n",str_replace(",,",",",$dic)));$dic=$num." # Produced By Stavekontrolden.dk\n".$dic; file_put_contents($dictionarydir."da_DK.dic",$dic);	echo '<p><a class="" href="'.str_replace("../","",$dictionarydir).'da_DK.dic" target="_blank">'._("Word List Created")."</a></p>";unlink($dictionarydir."da_DK.oxt");$oxtfiles=$dictionarydir."oxt-files/";file_put_contents($oxtfiles."README_da_DK.txt",preg_replace("/Version.*?\n/","Version $version - ".date("d-m-Y")."\n",file_get_contents($oxtfiles."README_da_DK.txt")));file_put_contents($oxtfiles."description.xml",preg_replace("/<version value=\".*?\"/","<version value=\"".date("Y.m.d")."\"",file_get_contents($oxtfiles."description.xml")));copy($dictionarydir."da_DK.aff",$oxtfiles."da_DK.aff");copy($dictionarydir."da_DK.dic",$oxtfiles."da_DK.dic");// ExampleExtendedZip::zipTree($oxtfiles, $dictionarydir."da_DK.oxt", ZipArchive::CREATE);echo '<p>Packed! </p><a class="btn btn-success" href="'.str_replace("../","",$dictionarydir).'da_DK.oxt" target="_blank">'._('Download Extension').'</a>';echo $log;class ExtendedZip extends ZipArchive {    // Member function to add a whole file system subtree to the archive    public function addTree($dirname, $localname = '') {        if ($localname)            $this->addEmptyDir($localname);        $this->_addTree($dirname, $localname);    }    // Internal function, to recurse    protected function _addTree($dirname, $localname) {        $dir = opendir($dirname);        while ($filename = readdir($dir)) {            // Discard . and ..            if ($filename == '.' || $filename == '..')                continue;            // Proceed according to type            $path = $dirname . '/' . $filename;            $localpath = $localname ? ($localname . '/' . $filename) : $filename;            if (is_dir($path)) {                // Directory: add & recurse                $this->addEmptyDir($localpath);                $this->_addTree($path, $localpath);            }            else if (is_file($path)) {                // File: just add                $this->addFile($path, $localpath);            }        }        closedir($dir);    }    // Helper function    public static function zipTree($dirname, $zipFilename, $flags = 0, $localname = '') {        $zip = new self();        $zip->open($zipFilename, $flags);        $zip->addTree($dirname, $localname);        $zip->close();    }}